buildscript {
    ext.serenityCoreVersion = '3.3.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:$serenityCoreVersion")
        classpath "net.serenity-bdd:serenity-single-page-report:$serenityCoreVersion"
    }
}
plugins {
    id "net.serenity-bdd.serenity-gradle-plugin" version "${serenityCoreVersion}"
    id 'java'
    id 'eclipse'
    id 'idea'
}

defaultTasks 'clean','test','aggregate'
apply plugin: 'net.serenity-bdd.serenity-gradle-plugin'

group 'com.saucedemo'
version '1.0-SNAPSHOT'

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenCentral()
}

ext {
    slf4jVersion = '1.7.7'
    serenityCoreVersion = '3.6.23'
    serenityCucumberVersion = '3.6.23'
    junitVersion = '5.8.2'
    assertJVersion = '3.22.0'
    logbackVersion = '1.2.10'
    lombokVersion = '1.18.22'
    log4jVersion = '2.17.1'
}

dependencies {
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    // https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.5.3'

    testImplementation ("net.serenity-bdd:serenity-core:${serenityCoreVersion}"){
        exclude group: 'org.apache.groovy', module: 'groovy'
    }
    implementation "net.serenity-bdd:serenity-ensure:${serenityCoreVersion}"
    implementation "net.serenity-bdd:serenity-junit5:${serenityCoreVersion}"
    implementation "net.serenity-bdd:serenity-cucumber:${serenityCucumberVersion}"
    implementation "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}"
    implementation "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCoreVersion}"
    implementation "net.serenity-bdd:serenity-screenplay-rest:${serenityCoreVersion}"

    implementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    implementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    implementation "org.assertj:assertj-core:${assertJVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation group: 'com.github.javafaker', name: 'javafaker', version: '1.0.2'

}
test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

serenity {
    testRoot = "com.saucedemo.runners"
    requirementsBaseDir = "src/test/resources/feature/pruebaE2E"


}

gradle.startParameter.continueOnFailure = true

test.finalizedBy(aggregate)